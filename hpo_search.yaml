DATA_PATH:
  /../../hy-nas/Data6/Processed/

MODEL_PATH:
  /models/
  
STUDY_PATH:
  /study/

RESULT_PATH:
  /results/
  #/results1/
  # /../../hy-tmp/study/

CLASS_NAMES: 
  ['Rest', 'Large diameter grasp', 'Adducted Thumb grasp', 'Index finger extension grasp', 'Medium wrap', 'Writing tripod grasp', 'Power sphere grasp', 'Precision sphere grasp']

DATA_CONFIG:
  sb_n: 2
  day_list: [1]
  time_list: [1, 2]
  trial_n: 12
  channel_n: 14 # number of sEMG channels

CV:
  valid_trial_list:
    #- [2, 8]
    #- [3, 9]
    #- [4, 10]
    #- [5, 11]
    #- [6, 12]
    - [1, 4, 7, 10]
    - [2, 5, 8, 11]
    - [3, 6, 9, 12]
  valid_trial_select:  # 4 # if None, use CV


DATA_LOADER:
  shuffle: True
  drop_last: True
  num_workers: 4
  pin_memory: True

TRAINING:
  epochs: 200
  early_stopping_iter: 10
  model_name: best_hpo

RETRAINING:
  epochs: 1
  model_name: retrained
  
HPO_STUDY:
  sampler:
    TPESampler() # eval()
  direction:
    minimize
  pruner:
    MedianPruner(n_startup_trials=5, n_warmup_steps=1, interval_steps=1) # eval()
  trial_n:
    25

HP:
  optimizer:
    Adam
  batch_size:
    256
  

HP_SEARCH:  
  EDL0: &edl_base0
    # optimizer:
    #  trial.suggest_categorical("optimizer", ["Adam", "RMSprop", "SGD"])
    lr:
      trial.suggest_loguniform("lr", 1e-6, 1e-2)
    #batch_size:
      #trial.suggest_int("batch_size", 32, 512, step=32)
    dropout_rate:
      trial.suggest_float("dropout_rate", 0.1, 0.5)

  TCN: &tcn_base
    #kernel_size:
    #  trial.suggest_int("kernel_size", 2, 5)
      #trial.set_user_attr("kernel_size", 5)
    layer_n:
      trial.suggest_int("layer_n", 3, 8)
    kernel_list:
      [51, 26, 13, 8, 4, 2]
  
    #tcn_channels:
    #  [32, 64, 128, 256, 512]
    #tcn_layer_n:
    #  trial.suggest_int("tcn_layer_n", 3, 6)
    #init_channel:
      #trial.suggest_int("init_channel_n", 8, )
    #  trial.suggest_discrete_uniform("init_channel_n", 2, 64, 2)

  EDL1: &edl_base1
    <<: *edl_base0
    evi_fun:
      trial.suggest_categorical("evi_fun", ["relu", "softplus", "exp"])
  EDL2: &edl_base2
    <<: *edl_base1
    annealing_step: 
      trial.suggest_int("annealing_step", 10, 60, step=5)
  EDL3: &edl_base3
    <<: *edl_base1
    l: 
      trial.suggest_float("l", 0.01, 1.0, log=True)


